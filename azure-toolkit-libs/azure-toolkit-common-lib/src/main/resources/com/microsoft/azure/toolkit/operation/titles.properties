account.sign_in=sign in to Azure
account.sign_out=sign out from Azure
account|auth_setting.load=load auth settings from file system
account|auth_setting.persist=persist auth settings to file system
account|auth_setting.update=update auth settings
account|subscription.get_detail.selected=load details of all selected subscriptions
account|subscription.get_detail=load details of subscription({0})
account|subscription.get_tenant=get tenant id of subscription({0})
account|subscription.list.tenant|authorized=load subscriptions from authorized tenants
account|subscription.list.tenant=get all subscriptions of tenant({0})
account|subscription.load_all=load all available subscriptions from Azure
account|subscription.select=select one/more subscriptions to work on
account|subscription.clear_cache=clear persistent subscriptions cache from file system
account|subscription.flush_cache=flush subscriptions cache
account|subscription.get_details=get details of all cached subscriptions
account|subscription.load_cache=reload subscriptions cache from file system
account|subscription.persist=persist subscriptions cache to file system
account|tenant.auth=authenticate tenant({0})
account|tenant.list.authorized=get all authorized tenants
ai.create.rg=create application insight({0}) in resource group({1})
ai.list.subscription=load application insights of subscription({0})
appservice|file.check_existence=check the existence of file({0})
appservice|file.download=download file({0}) to local
appservice|file.get.path=get file with path({0}) of webapp({1})
appservice|file.get_content=load content of file({0}) of webapp({1})
appservice|file.list.dir=list files in directory({0}) of webapp({1})
appservice|file.list=reload log/files of web/function app({0})
appservice|file.open_editor=open and focus the editor of file({0})
appservice|file.open=open file({0}) in editor
appservice|file.refresh=refresh file({0})
appservice|file.save=save file({0}) to azure
appservice|file.upload=upload file to path({0}) of webapp({1})
appservice|file.write_editor=load file content into editor
appservice|flight_recorder.profile=Profile Flight Recorder
appservice|log_stream.close=close streaming log of app({0})
appservice|log_stream.open=open streaming log of app({0})
appservice|log_stream.start=start streaming log of app({0})
appservice|plan.list.subscription|rg=get all service plans in resource group({0}) of subscription({1})
appservice|plan.list.subscription=load app service plans of subscription({0})
arm|deployment.deploy=deploy azure resource(deployment:{0})
arm|deployment.update=update azure resource(deployment:{0})
arm|rg.delete=delete resource group({0})
arm|rg.get.subscription=load details of resource group({0}) in subscription({1})
arm|rg.list.subscription|selected=list resource groups of selected subscription
arm|rg.list.subscription=list resource groups of subscription({0})
blob.create=create blob container({0})
blob.delete=delete blob({0})
blob.download=download blob into file({0}) from container({1})
blob.list=load blobs of container({0})
blob.upload=upload blob file({0}) to blob container({1})
common.list_regions=list all available locations
common.list_tiers=list all available pricing tiers
common.load_whatsnew=load what's new document
common.open_portal=open setting page of resource({0}) in portal
common.show_properties=show properties of deployment({0})
common|artifact.get_file=get target file of artifact({0})
common|artifact.get_id=get identifier of artifact({0})
common|artifact.zip_files=archive artifacts into ({0}) for deployment
common|combobox.load_items=load/refresh {0} items in combo box
common|explorer.initialize=initialize Azure explorer
common|explorer.open=open Azure explorer
common|explorer.refresh=refresh Azure explorer
common|node.load_content=load content of node({0})
common|region.list.subscription|tier=get available regions with pricing tier({0}) of subscription({1})
common|region.list.subscription=load available regions of subscription({0})
common|rest_client.create_asc=create rest client for Azure Spring Cloud services in subscription({0})
common|rest_client.create_mysql=create rest client for Azure MySQL services in subscription({0})
common|rest_client.create=create rest client for general Azure services in subscription({0})
deployment.list.subscription|rg=list all deployments of resource group({0}) in subscription({1})
deployment.list.subscription|selected=list all deployments of selected subscriptions
deployment.list.subscription=list all deployments of subscription({0})
docker.add_docker_support.configuration=add docker support within run/debug configuration
docker.create_from_private_image=create web app({0}) in subscription({1}) with private registry image({2})
docker.deploy_image.state=deploy docker image to web app
docker.ping=try connecting docker({0})
docker.start.configuration=start docker based web app within run/debug configuration
docker|image.build=build docker image({0}) in directory({1}) on docker host({2})
docker|image.pull=pull docker image({0})
docker|image.push.configuration=push docker image to web app within run/debug configuration
docker|image.push=push docker image({0}) to registry({1})
docker|image.update=update docker image of web app({0}) to ({1})
function.clean_staging_folder=clean up staging folder({0})
function.complete_deployment=complete the deployment of function({0}) and refresh Azure Explorer
function.complete_local_run=complete running function({0})
function.copy_settings=copy local settings({0}) to staging folder({1})
function.create_detail=create function app ({0})...
function.create=create function app
function.delete=delete function app({0}) in subscription({1})
function.deploy.configuration=deploy function app within run/debug configuration
function.deploy.state=deploy function app
function.deploy_artifact=deploy artifacts to function
function.get.rg=get function app({0}) in resource group({1})
function.get_detail=get detail info of function app({0}) in subscription({1})
function.get_publishing_profile=get publishing profile of function app({0}) with secret
function.get_tiers=get all available pricing tiers for function apps
function.get_version=get version of function({0})
function.launch_debugger=launch debugger for function
function.list.subscription|selected=list all function apps in selected subscription(s)
function.list.subscription=list all function apps in subscription({0})
function.list_function_methods=list all function methods in module({0}) by annotation
function.list_function_modules=list all function modules in project({0})
function.load_setting=load app settings of function app({0})
function.open_creation_dialog=open function app creation dialog
function.prepare_staging_folder_detail=prepare staging folder({0}) for function({1})
function.prepare_staging_folder=prepare staging folder for function method
function.refresh=refresh functions in function app
function.reload_all=reload function apps
function.restart=restart function app({0}) in subscription({1})
function.run.configuration=run function app locally within run/debug configuration
function.run.state=run function app locally
function.start=start function app({0}) in subscription({1})
function.stop=stop function app({0}) in subscription({1})
function.turn_on_logs=turn on application log for function app({0})
function.update_setting=update settings of function app({0})
function.validate_jre=validate version of local jre
function.validate_project=check if project({0}) is a valid function project
function.validate_runtime=validate runtime of function({0})
function|ai.create=create application insights for function({0})
function|cli.run=run function CLI command from staging folder({0})
function|envelops.list=get all envelops of function app({0}) in subscription({1}})
function|trigger.list_urls=list http trigger urls
function|trigger.list=sync and list triggers of function({0})
function|trigger.start.detail=trigger function({0})
function|trigger.start_event=start event hub trigger for function({0})
function|trigger.start_http=start http trigger for function({0})
function|trigger.start_timer=start timer trigger for function({0})
function|trigger.start=trigger function app
mysql.create=create Azure Database for MySQL({0}) in subscription({1})
springcloud.deploy=deploy spring cloud application
springcloud.update_dependency=update Azure Spring Cloud dependencies for project({0})
springcloud|log_stream.close=close stream log for Spring Cloud app/instance({0})
springcloud|log_stream.open=open stream log for Spring Cloud app/instance({0})
springcloud|log_stream.start=start stream log for Spring Cloud app/instance({0})
storage.create_account=creating storage account({0})
vm.create=create virtual machine({0})
vm.list_availability_sets=list all available availability sets
vm.list_public_ips=load all available public ip addresses
vm.list_security_groups=list all available network security groups
vm.list_sizes.region=list all VM sizes in region({0})
vm.list_storage_accounts=list all available storage accounts
vm.list_virtual_networks=load all available virtual networks
vm|image.list=load images
vm|offer.list=load offers in publisher({0})
vm|publisher.list=load publishers
vm|sku.list=load skus in offer({0})
webapp.clear_cache=clear local web apps cache
webapp.complete_deployment.state=complete the deployment of web app({0}) and refresh Azure Explorer
webapp.complete_starting.state=update local configuration and open url of web app in local browser
webapp.create_detail=create web app({0})
webapp.create=create web app
webapp.delete_detail=delete web app({0})
webapp.delete=delete web app
webapp.deploy_artifact=deploy artifact to web app ({0})
webapp.deploy_module=deploy module({0}) as Azure web app
webapp.get_publishing_profile=get publishing profile of web app({0}) with secret
webapp.get=get detail info of web app({0}) in subscription({1})
webapp.init_config=init web app configuration
webapp.list_containers=list all available web containers
webapp.list_jdks=list all available JDKs
webapp.list_linux_runtime=list all available linux runtime stacks
webapp.list.subscription|selected=list all web apps in selected subscription(s)
webapp.list.detail|subscription|selected=list all web apps with details in selected subscription(s)
webapp.list.java|subscription|selected=list all java web apps in selected subscription(s)
webapp.list.linux|subscription|selected=list all linux web apps in selected subscription(s)
webapp.list.windows|subscription|selected=list all windows web apps in selected subscription(s)
webapp.list.subscription=list all web apps in subscription({0})
webapp.list.linux|subscription=list all linux web apps in subscription({0})
webapp.list.windows|subscription=list all windows web apps in subscription({0})
webapp.open_browser.state=open web app in local browser
webapp.open_creation_dialog=open web app creation dialog
webapp.refresh=refresh content of web app
webapp.reload=reload web apps in selected subscription(s)
webapp.update_settings=update settings of web app({0})
webapp|artifact.get.state=get the artifact to be deployed to web app({0})
webapp|artifact.prepare_ftp=prepare ftp connection for deployment
webapp|artifact.update=update artifact of app({0})
webapp|artifact.upload_ftp=upload file to ftp server
webapp|artifact.upload=upload artifact({0}) to app({1})
webapp|artifact.zip=archive artifact({0}) to temporary zip file for deployment
webapp|deployment.create.state=create deployment slot for web app({0})
webapp|deployment.create=create deployment({0}) for web app({1})
webapp|deployment.delete=delete deployment slot({0}) of web app({1})
webapp|deployment.get_publishing_profile=get publishing profile of deployment slot({0}) of web app({1}) with secret
webapp|deployment.list=get deployment slots of web app({0})
webapp|deployment.refresh=refresh deployment slot({0}) of web app({1})
webapp|deployment.reload=refresh deployment slots of web app({0})
webapp|deployment.restart=restart deployment slot({0}) of web app({1})
webapp|deployment.start=start deployment slot({0}) of web app({1})
webapp|deployment.stop=stop deployment slot({0}) of web app({1})
webapp|deployment.swap=swap deployment slot({0}) of web app({1}) for production
webapp|deployment.update_settings=update settings of deployment slot({0}) of web app({1})
webapp|ssh.connect=connect to web app ({0})
webapp|ssh.open=Opening SSH - ({0}) session ...
